<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="https://ricardolopes.net/blog/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ricardo Lopes</title>
    <description>Tech lead and backend engineer focused on architecting and building secure and scalable services</description>
    <link>https://ricardolopes.net/blog</link>
    <atom:link href="https://ricardolopes.net/blog/rss.xml" rel="self" type="application/rss+xml"/>
    <language>en</language>
    <item>
      <title>No Surprises</title>
      <description>
            <p>
              One of my principles for software development is “no surprises”.
              Things should be exactly where we expect them to be, and look
              exactly like what we expect then to look like. Code should do
              exactly what we expect it to do.
            </p>
            <p>
              When things are surprising, we have to spend more mental effort
              trying to understand them. If we can't trust a codebase to have no
              surprises, we're constantly on high alert.
            </p>
            <p>
              When code has no surprises, there's a whole cognitive load that is
              no longer needed. We can get into a focused flow state, knowing
              that we can trust the code we see and don't need to second-guess
              everything.
            </p>
            <p>
              Here are some examples of how to apply this principle, in no
              particular order.
            </p>
            <h2 id="heading-consistent-style">Consistent style</h2>
            <p>Enforce a linter and autoformatter.</p>
            <p>
              I don't care which rules you choose. The important part is to have
              consistent rules applied everywhere. This will make all code look
              consistent and predictable, so that no one has to spend time or
              effort with style decisions.
            </p>
            <p>
              Don't make developers discuss style in pull requests. It has to be
              a solved problem at that point.
            </p>
            <h2 id="heading-clear-project-structure">
              Clear project structure
            </h2>
            <p>
              If you've got a models directory, don't put models files anywhere
              else.
            </p>
            <p>
              If one endpoint calls a service that calls a model, don't have
              another endpoint calling a manager that calls a repository that
              calls the database directly.
            </p>
            <p>
              When a developer is working on a new feature, they should never
              need to spend time deciding what the structure should be like:
              they should just need to follow the project convention.
            </p>
            <p>
              Also: keep the project structure easy to understand and to apply
              for new code.
            </p>
            <h2 id="heading-no-hidden-consequences">No hidden consequences</h2>
            <p>
              If you're calling a GET endpoint, you're not expecting it to
              mutate data.
            </p>
            <p>
              If you're calling a model method, you're not expecting calls to
              external providers.
            </p>
            <p>
              When these assumptions fail, it not only forces the developer to
              spend more time hunting for those hidden consequences, but it's
              also a common source of bugs.
            </p>
            <h2 id="heading-no-needlessly-defensive-code">
              No needlessly defensive code
            </h2>
            <p>
              If email is a required field for users, you don't need to protect
              against a missing email in the rest of the codebase.
            </p>
            <p>
              If an endpoint returns a list of resources, you don't need to
              protect against a 404 when no resources exist: the response is a
              200 with an empty list.
            </p>
            <p>
              If a module requires a user to be an admin to reach it, you don't
              need to repeat that check inside the module.
            </p>
            <p>
              This sort of needlessly defensive code is protecting against
              threats that don't exist, and is casting doubts onto developer's
              minds (wait, email could be undefined at this point??).
            </p>
            <h2 id="heading-industry-conventions">Industry conventions</h2>
            <p>
              Write idiomatic code, use the framework's conventions, follow best
              practices.
            </p>
            <p>
              You don't need to blindly cargo cult what everyone else is doing,
              or apply conventions that don't make sense for your specific
              situation. But often it's useful to look for common patterns and
              solutions that the industry has reached consensus on, which could
              benefit you as well.
            </p>
            <p>
              This allows you not only to benefit from the wisdom of the crowd,
              but also to keep surprises low when switching between projects and
              teams.
            </p>
            <h2 id="heading-the-right-abstraction">The right abstraction</h2>
            <p>
              The platform you're developing on provides a set of APIs and tools
              you and everyone else can use.
            </p>
            <p>
              <a
                href="https://ricardolopes.net/blog/resist-exploding-complexity/"
                >Unneeded custom abstractions and complexity</a
              >
              on top of that common interface will look surprising and require
              more mental effort to understand and to look for unexpected
              behaviours. Not to mention more surface area for maintenance work
              and bugs.
            </p>
            <h2 id="heading-and-more">And more</h2>
            <p>
              I'm sure there are a lot more examples of this principle. I may
              update this list in the future, if something else meaningful comes
              up. But I hope its message is clear already.
            </p>
            <p>
              Make your code as boring and as unsurprising as possible. The
              mental load from dealing with surprises and uncertainty may not
              seem much to you, at first, but it compounds, eventually turning a
              project into a fragile unmaintainable mess that developers are too
              afraid to touch.
            </p>
            <p>I hope none of this sounds too surprising :)</p>
      </description>
      <link>https://ricardolopes.net/blog/no-surprises/</link>
      <guid isPermaLink="true">https://ricardolopes.net/blog/no-surprises/</guid>
      <dc:creator>Ricardo Lopes</dc:creator>
      <pubDate>Fri, 19 Fev 2024 00:03:16 GMT</pubDate>
    </item>
    <item>
      <title>Being Uplifting</title>
      <description>
            <p>
              When someone chooses a career, they go for the work they like the
              most, within their abilities. I know I did when I followed
              software development. And yet, you don't see many people
              celebrating Mondays and lamenting the end of the week. Not even
              close.
            </p>
            <p>
              Somewhere along the way, we all experience the office politics,
              the bad management, the boring tasks, the lack of agency, and so
              on.
            </p>
            <p>We love the craft, but not necessarily the job.</p>
            <p>
              In all the teams I've worked with, I've never seen an ideal
              scenario where nothing is wrong. And I don't think I will, ever.
              And neither will you. The real world is always messy.
            </p>
            <p>
              It's up to us to decide how we want to react to everything that is
              wrong around us.
            </p>
            <blockquote>
              <p>
                "We have absolutely no control over what happens to us in life
                but what we have paramount control over is how we respond to
                those events."
              </p>
              <p>Viktor Frankl</p>
            </blockquote>
            <h2 id="heading-being-a-complainer">Being a complainer</h2>
            <p>
              Early in my career, I wouldn't shy away from the opportunity to
              complain about everything that was wrong with the codebase and
              with the company. Something was wrong, so someone had to complain
              about it!
            </p>
            <p>
              Asked to waste time fixing data inconsistencies rather than
              addressing their root cause? What a prioritisation failure from
              leadership! Long build times slowing down development? What a
              terrible mess we've inherited from those who coded that in the
              first place!
            </p>
            <p>
              It truly felt like an important service to raise awareness of
              issues that were holding the company's mission back.
            </p>
            <p>
              Over time, I got more experience, and more respect from peers. I
              was still an individual contributor, but was naturally doing more
              and more mentoring work.
            </p>
            <p>
              One day, I was mentoring two recently-joined junior developers who
              were still learning how things worked. I was trying to be helpful
              and authentic, so I made sure to highlight plenty of issues with
              the codebase and with the organisation. It's useful to know the
              pitfalls to look out for, after all. All in good spirits.
            </p>
            <p>
              Later, I had a conversation with my team lead, who learned about
              that session. That's where I had one of the biggest realisations
              of my career.
            </p>
            <h2 id="heading-being-intentional">Being intentional</h2>
            <p>
              See, my intentions surely were pure, but I wasn't being the
              helpful mentor I thought I was: I was just being a complainer. I
              was just ranting about all the things I disliked.
            </p>
            <p>
              As newly joined junior developers, they looked up to more
              established senior developers to form their opinion about what
              they've just signed up for. And if established senior developers
              paint such a gloomy picture, that's what they assume as true.
            </p>
            <p>
              This sounds obvious in hindsight, but sometimes we need the timely
              reminder: if you've got a balanced view about something, but you
              overly focus on the bad parts, then you're not sharing an accurate
              representation of your views. Others can't read your mind, only
              interpret your actions, so they'll believe your views are the
              non-representative picture you've shared.
            </p>
            <p>
              So, don't be a complainer. Instead, be intentional, a fair
              reporter of your full range of opinions. This is especially
              important if there are people looking up to you and valuing and
              trusting what you're saying!
            </p>
            <p>
              This realisation was critical to set the stage for the next one.
            </p>
            <h2 id="heading-being-uplifting">Being uplifting</h2>
            <p>
              Not long after that episode, something else clicked for me. My
              mood can easily be influenced by the environment around me. If
              it's full of complainers, I'll be a complainer, too. If morale is
              low, mine will be as well.
            </p>
            <p>
              After having contributed for so long to an environment of
              complaining, I realised that actually, culture isn't set in stone.
              It's malleable. The culture is set every day by the people who
              show up. And you're one of them.
            </p>
            <p>
              No matter how you rank within your company, you are an influencer
              of its environment. We all are, whether we realise it or not. You
              can choose to blend in with how others set it, or you can opt for
              planting a different seed.
            </p>
            <blockquote>
              <p>"Be the change you wish to see in the world."</p>
              <p>Apparently miquoted to Gandhi</p>
            </blockquote>
            <p>
              Influence the environment you want to be a part of. If you're a
              complainer, you're enabling an environment of complainers. If you
              want to be a part of an uplifting environment, it starts with you.
            </p>
            <p>Be an uplifter.</p>
            <p>
              When others complain, you can publicly celebrate your teammates’
              successes. When others plot against each other, you can ignore the
              noise and focus on beating the only one who matters: your past
              self.
            </p>
            <p>
              If the tasks are dull, use your spare time to explore and learn
              new things, rather than using it to rant about how boring things
              are. If your company offers a learning budget, make good use of
              it!
            </p>
            <p>
              Be intentional with the way you interact with others. Make them
              feel valued and filled with energy, even on days when you don't
              feel that energetic yourself. People remember how you made them
              feel. And they act accordingly.
            </p>
            <p>
              This isn't about dropping your authenticity and pretending to be
              someone you're not, or sharing opinions that aren't what you truly
              think. It's about realising that your actions have consequences,
              and you can be intentional in surfacing your best self.
            </p>
            <p>
              This is also not about toxic positivity. It's still important to
              flag issues and to try to fix them. We shouldn't self-censor any
              criticism, we should just be more strategical about when it's
              actually useful to share it, and being constructive about it.
            </p>
            <p>
              This is about lifting others up: showing excitement about things,
              not ranting all the time for the sake of it, openly celebrating
              success, being kind to team members, and so on.
            </p>
            <p>
              And, when in doubt, you can slightly exaggerate these positive
              behaviours. Communication is hard, especially if you're remote,
              for instance, or when writing. So, slight exaggerations go a long
              way in removing ambiguity or misunderstandings.
            </p>
            <p>
              Is this mindset change a silver bullet against everything that is
              wrong with a job? Of course not! And if you're in an awful
              environment, your best option may be to look for something better.
            </p>
            <p>
              But for your everyday job, I've seen this mindset shift improve
              not just my day to day, but also the morale of the rest of the
              team. And I'm just a recovering complainer, still with much to
              improve here myself.
            </p>
            <p>
              Start contributing to the culture you want to be a part of. Don't
              be a complainer. Instead, be intentionally uplifting: share your
              full range of opinions, but focus on abundant positivity towards
              your teammates and saving rants for when they're actually useful.
            </p>
            <p>It starts with you.</p>
      </description>
      <link>https://ricardolopes.net/blog/being-uplifting/</link>
      <guid isPermaLink="true">https://ricardolopes.net/blog/being-uplifting/</guid>
      <dc:creator>Ricardo Lopes</dc:creator>
      <pubDate>Sat, 10 Feb 2024 01:21:50 GMT</pubDate>
    </item>
    <item>
      <title>Resist Exploding Complexity</title>
      <description>
            <p>
              Building web applications seems to be getting more and more
              complex. Abstractions upon abstractions, and fixes for problems
              caused by fixes for other problems. But does it have to be this
              way?
            </p>
            <p>
              There's a place for complex frameworks and architectures, sure.
              But for many projects, they may be an overkill.
            </p>
            <p>
              Let's think through first principles and explore what the web
              platforms offer by default to see how far we can go before
              starting to explode complexity. This is a thought exercise to
              challenge assumptions, not a prescription to blindly follow.
            </p>
            <p>
              If we browse the
              <a
                target="_blank"
                href="https://nodejs.org/en/learn/getting-started/introduction-to-nodejs"
                >Node.js documentation</a
              >, we can get a simple working web server:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node:http'</span>);

<span class="hljs-keyword">const</span> hostname = <span class="hljs-string">'127.0.0.1'</span>;
<span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span>;

<span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/plain'</span>);
  res.end(<span class="hljs-string">'Hello World\n'</span>);
});

server.listen(port, hostname, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Server running at http://<span class="hljs-subst">${hostname}</span>:<span class="hljs-subst">${port}</span>/`</span>);
});
</code></pre>
            <p>We can test to see if it works:</p>
            <pre><code class="lang-plaintext">$ node server.js
Server running at http://127.0.0.1:3000/
</code></pre>
            <pre><code class="lang-plaintext">$ curl http://127.0.0.1:3000
Hello World
</code></pre>
            <p>
              We can adapt the server to use routes for specific endpoints. For
              instance, it can reply to requests to <code>/</code>, and return
              404 otherwise:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-comment">// GET /</span>
<span class="hljs-keyword">const</span> getIndex = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/plain"</span>);
  res.end(<span class="hljs-string">"Hello World\n"</span>);
};

<span class="hljs-keyword">const</span> throwNotFound = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">404</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/plain"</span>);
  res.end(<span class="hljs-string">"Not Found\n"</span>);
};

<span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">"GET"</span> &amp;&amp; req.url === <span class="hljs-string">"/"</span>) {
    getIndex(req, res);
  } <span class="hljs-keyword">else</span> {
    throwNotFound(req, res);
  }
});
</code></pre>
            <pre><code class="lang-plaintext">$ curl -i http://127.0.0.1:3000
HTTP/1.1 200 OK
Content-Type: text/plain
...

Hello World

$ curl -i http://127.0.0.1:3000/hello
HTTP/1.1 404 Not Found
Content-Type: text/plain
...

Not Found
</code></pre>
            <p>
              Great! We can also return HTML, to serve web pages to the browser:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getIndex = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/html; charset=utf-8"</span>);
  res.end(<span class="hljs-string">`&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;`</span>);
};
</code></pre>
            <pre><code class="lang-plaintext">$ curl http://127.0.0.1:3000
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Hello World&lt;/h1&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
            <p>
              <img
                src="https://ricardolopes.net/blog/resist-exploding-complexity/screen1.png"
              />
            </p>
            <p>We can also send dynamic data:</p>
            <pre><code class="lang-javascript"><span class="hljs-comment">// Dynamic list of to-do items (non-persisted)</span>
<span class="hljs-keyword">const</span> todos = [<span class="hljs-string">'accept user input'</span>];

<span class="hljs-comment">// GET /</span>
<span class="hljs-keyword">const</span> getIndex = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/html; charset=utf-8"</span>);
  res.end(<span class="hljs-string">`&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;To-Do:&lt;/h1&gt;
    &lt;ul&gt;
<span class="hljs-subst">${todos.map((todo) =&gt; <span class="hljs-string">`      &lt;li&gt;<span class="hljs-subst">${todo}</span>&lt;/li&gt;`</span>).join(<span class="hljs-string">"\n"</span>)}</span>
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;\n`</span>);
};
</code></pre>
            <p>
              <img
                src="https://ricardolopes.net/blog/resist-exploding-complexity/screen2.png"
              />
            </p>
            <p>
              And we can add a new endpoint to create new entries for that
              dynamic data, once again just following the
              <a
                target="_blank"
                href="https://nodejs.org/en/guides/anatomy-of-an-http-transaction/#request-body"
                >official documentation</a
              >:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> querystring = <span class="hljs-built_in">require</span>(<span class="hljs-string">"node:querystring"</span>);

<span class="hljs-comment">// POST /todos</span>
<span class="hljs-keyword">const</span> postTodo = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">let</span> body = [];
  req
    .on(<span class="hljs-string">"data"</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> {
      body.push(chunk);
    })
    .on(<span class="hljs-string">"end"</span>, <span class="hljs-function">() =&gt;</span> {
      body = Buffer.concat(body).toString();
      <span class="hljs-keyword">const</span> parsedBody = querystring.parse(body);
      <span class="hljs-keyword">if</span> (parsedBody.todo) {
        todos.push(parsedBody.todo);
      }
      res.writeHead(<span class="hljs-number">301</span>, { <span class="hljs-attr">Location</span>: <span class="hljs-string">"/"</span> }).end();
    });
};

<span class="hljs-keyword">const</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">"GET"</span> &amp;&amp; req.url === <span class="hljs-string">"/"</span>) {
    getIndex(req, res);
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.method === <span class="hljs-string">"POST"</span> &amp;&amp; req.url === <span class="hljs-string">"/todos"</span>) {
    postTodo(req, res);
  } <span class="hljs-keyword">else</span> {
    throwNotFound(req, res);
  }
});
</code></pre>
            <pre><code class="lang-plaintext">$ curl -L http://127.0.0.1:3000/todos -d "todo=test new endpoint"
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;To-Do:&lt;/h1&gt;
    &lt;ul&gt;
      &lt;li&gt;accept user input&lt;/li&gt;
      &lt;li&gt;test new endpoint&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
            <p>
              After that, we can add a form to allow adding new entries through
              the browser:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getIndex = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/html; charset=utf-8"</span>);
  res.end(<span class="hljs-string">`&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;To-Do:&lt;/h1&gt;
    &lt;form method="POST" action="/todos"&gt;
      &lt;input type="text" name="todo" /&gt;
      &lt;button type="submit"&gt;Add&lt;/button&gt;
    &lt;/form&gt;
    &lt;ul&gt;
<span class="hljs-subst">${todos.map((todo) =&gt; <span class="hljs-string">`      &lt;li&gt;<span class="hljs-subst">${todo}</span>&lt;/li&gt;`</span>).join(<span class="hljs-string">"\n"</span>)}</span>
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;\n`</span>);
};
</code></pre>
            <p>
              <img
                src="https://ricardolopes.net/blog/resist-exploding-complexity/screen3.png"
              />
            </p>
            <p>
              This may be all good, but it's still only server-side interaction.
              We want some JavaScript to make client-side interactions that make
              this feel more like an SPA, without page refreshes. Let's add some
              progressive enhancement.
            </p>
            <p>
              The first step is to update the <code>POST /todos</code> endpoint
              to accept JSON requests from client-side JavaScript, in addition
              to the HTML form it already supported:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> postTodo = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  <span class="hljs-keyword">let</span> body = [];
  req
    .on(<span class="hljs-string">"data"</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> {
      body.push(chunk);
    })
    .on(<span class="hljs-string">"end"</span>, <span class="hljs-function">() =&gt;</span> {
      body = Buffer.concat(body).toString();
      <span class="hljs-keyword">const</span> isJson = req.headers[<span class="hljs-string">"content-type"</span>] === <span class="hljs-string">"application/json"</span>;
      <span class="hljs-keyword">const</span> parsedBody = isJson ? <span class="hljs-built_in">JSON</span>.parse(body) : querystring.parse(body);
      <span class="hljs-keyword">if</span> (parsedBody.todo) {
        todos.push(parsedBody.todo);
      }
      <span class="hljs-keyword">if</span> (isJson) {
        <span class="hljs-comment">// Return 201 with HTML list if requested from client-side JS</span>
        res.statusCode = <span class="hljs-number">201</span>;
        res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/html; charset=utf-8"</span>);
        res.end(todos.map(<span class="hljs-function">(<span class="hljs-params">todo</span>) =&gt;</span> <span class="hljs-string">`      &lt;li&gt;<span class="hljs-subst">${todo}</span>&lt;/li&gt;\n`</span>).join(<span class="hljs-string">""</span>));
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// Return 301 with redirect to GET / if requested from HTML form</span>
        res.writeHead(<span class="hljs-number">301</span>, { <span class="hljs-attr">location</span>: <span class="hljs-string">"/"</span> }).end();
      }
    });
};
</code></pre>
            <p>
              Notice that the endpoint is returning HTML instead of a JSON
              object. Both are fine, but HTML responses at least minimise the
              work required on the client.
            </p>
            <p>
              With this new support, we can finally add some client-side
              JavaScript to intercept the form request and use
              <code>fetch()</code> instead, so that we can add a new entry and
              update the list with no page refresh:
            </p>
            <pre><code class="lang-javascript"><span class="hljs-keyword">const</span> getIndex = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> {
  res.statusCode = <span class="hljs-number">200</span>;
  res.setHeader(<span class="hljs-string">"Content-Type"</span>, <span class="hljs-string">"text/html; charset=utf-8"</span>);
  res.end(<span class="hljs-string">`&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;title&gt;My Simple Web Application&lt;/title&gt;
    &lt;meta name="viewport" content="width=device-width,initial-scale=1" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;To-Do:&lt;/h1&gt;
    &lt;form id="add-todo" method="POST" action="/todos" onsubmit="return postTodo();"&gt;
      &lt;input type="text" name="todo" /&gt;
      &lt;button type="submit"&gt;Add&lt;/button&gt;
    &lt;/form&gt;
    &lt;ul id="todos"&gt;
<span class="hljs-subst">${todos.map((todo) =&gt; <span class="hljs-string">`      &lt;li&gt;<span class="hljs-subst">${todo}</span>&lt;/li&gt;`</span>).join(<span class="hljs-string">"\n"</span>)}</span>
    &lt;/ul&gt;
    &lt;script&gt;
      function postTodo() {
        const todo = document.getElementById("add-todo").todo;
        const ul = document.getElementById("todos");

        fetch("/todos", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ todo: todo.value })
        })
        .then(response =&gt; response.text())
        .then(html =&gt; {
          ul.innerHTML = html;
          todo.value = "";
        });

        return false;
      }
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;\n`</span>);
};
</code></pre>
            <p>
              <img
                src="https://ricardolopes.net/blog/resist-exploding-complexity/screen4.png"
              />
            </p>
            <p>
              It works! It's now sending an
              <code>application/json</code> request that receives a 201 instead
              of an <code>application/x-www-form-urlencoded</code> with a 301
              back to the main page.
            </p>
            <p>
              We could go on. Next, we'd add editing, deleting, persistence,
              styling, and so on. We could also do some much-needed refactoring,
              such as extracting request body parsing and building HTML
              responses. Or moving the client-side JavaScript into its own file
              that is requested by the HTML page, to avoid that ugly JavaScript
              inside a template string. But this post is getting long, and
              hopefully I've already made my point by now.
            </p>
            <p>
              The full web application so far is a single JavaScript file with
              97 lines, including blank lines, comments and some duplicated code
              that could probably be simplified. And that's enough to power a
              web application (frontend and backend) with server-side and
              progressively enhanced client-side data handling. No React, NextJS
              or even a build step required. No <code>package.json</code> file
              needed to install 184726 dependencies full of security and
              deprecation warnings. No fear that in 6 months this will no longer
              run because of breaking changes and incompatibilities.
            </p>
            <p>
              Am I recommending you to follow this exact approach on your next
              project? Absolutely not! My point isn't that this is the Right Way
              and anything else is the Wrong Way. My point is that we can resist
              the exploding complexity of code and abstractions if we don't need
              them. There's a place for complex frameworks and architectures,
              but we don't need to expose ourselves to that complexity
              elsewhere. Or at least we don't need to start from that point.
            </p>
            <p>
              Let's celebrate the powerful primitives our platforms already
              provide us, and climb the exploding complexity ladder only when
              those primitives are no longer sufficient.
            </p>
      </description>
      <link>https://ricardolopes.net/blog/resist-exploding-complexity/</link>
      <guid isPermaLink="true">https://ricardolopes.net/blog/resist-exploding-complexity/</guid>
      <dc:creator>Ricardo Lopes</dc:creator>
      <pubDate>Sat, 03 Feb 2024 00:33:07 GMT</pubDate>
    </item>
    <item>
      <title>About This Blog</title>
      <description>
        <p>Hi, I'm Ricardo Lopes, a tech lead and backend engineer. Welcome to my blog! This is where I'm sharing a collection of thoughts, experiments, wise advice from my mentors, notes on things I'm reading, and more. All views are my own and not of any employer.</p><p>My first goal with this blog is selfish: I want to write about those topics because writing helps clarify my thinking and crystallise what I've learnt. I've been learning so much since I started this journey over a decade ago, if I don't write things down, I risk forgetting important anecdotes and nuggets of wisdom.</p><p>But if that were my only goal, I wouldn't need to post anything in public.</p><p>I believe I wouldn't be where I am today in my career if it weren't for the exceptional mentors I had along the way. I've learnt a lot from them, and I'm a much better developer today than what I would have been otherwise.</p><p>Now that I've benefited from all those lessons, I believe it's my turn to pay it forward and to share what I've learnt with you.</p><p>I'm no guru preaching his gospel to his disciples. I don't claim to have all the answers, and I still view myself more as a student, not as a teacher. So this is more about sharing notes as peers of the things that resonated with me the most.</p><p>If you're curious and want to learn more, be sure to <a target="_blank" href="https://ricardolopes.net/blog/rss.xml">subscribe</a> and follow along. I hope to make it well worth your time!</p><p>You can also follow or DM me on <a target="_blank" href="https://x.com/ricardoplopes">X (formerly Twitter)</a> or <a target="_blank" href="https://www.linkedin.com/in/ricardopintolopes">LinkedIn</a>.</p>
      </description>
      <link>https://ricardolopes.net/blog/about/</link>
      <guid isPermaLink="true">https://ricardolopes.net/blog/about/</guid>
      <dc:creator>Ricardo Lopes</dc:creator>
      <pubDate>Fri, 19 Jan 2024 00:39:14 GMT</pubDate>
    </item>
  </channel>
</rss>
